/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEHealthCheckerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkBloodGlucose"
      | "checkBloodOxygen"
      | "checkBloodPressure"
      | "checkBodyTemperature"
      | "checkHeartRate"
      | "getBloodPressureRanges"
      | "getHealthMetricRanges"
      | "getHealthStatus"
      | "protocolId"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "HealthCheckRequested"
      | "HealthCheckResult"
      | "HealthStatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkBloodGlucose",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBloodOxygen",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBloodPressure",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBodyTemperature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkHeartRate",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBloodPressureRanges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthMetricRanges",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHealthStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkBloodGlucose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBloodOxygen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBloodPressure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBodyTemperature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkHeartRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBloodPressureRanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthMetricRanges",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHealthStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
}

export namespace HealthCheckRequestedEvent {
  export type InputTuple = [
    user: AddressLike,
    requestId: BytesLike,
    metric: BigNumberish
  ];
  export type OutputTuple = [user: string, requestId: string, metric: bigint];
  export interface OutputObject {
    user: string;
    requestId: string;
    metric: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HealthCheckResultEvent {
  export type InputTuple = [
    user: AddressLike,
    requestId: BigNumberish,
    metric: BigNumberish,
    status: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    requestId: bigint,
    metric: bigint,
    status: bigint
  ];
  export interface OutputObject {
    user: string;
    requestId: bigint;
    metric: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HealthStatusUpdatedEvent {
  export type InputTuple = [user: AddressLike, metric: BigNumberish];
  export type OutputTuple = [user: string, metric: bigint];
  export interface OutputObject {
    user: string;
    metric: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEHealthChecker extends BaseContract {
  connect(runner?: ContractRunner | null): FHEHealthChecker;
  waitForDeployment(): Promise<this>;

  interface: FHEHealthCheckerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkBloodGlucose: TypedContractMethod<
    [bloodGlucose: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  checkBloodOxygen: TypedContractMethod<
    [bloodOxygen: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  checkBloodPressure: TypedContractMethod<
    [bloodPressure: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  checkBodyTemperature: TypedContractMethod<
    [bodyTemperature: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  checkHeartRate: TypedContractMethod<
    [heartRate: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  getBloodPressureRanges: TypedContractMethod<
    [],
    [[bigint, bigint] & { min: bigint; max: bigint }],
    "view"
  >;

  getHealthMetricRanges: TypedContractMethod<
    [],
    [
      [bigint[], bigint[], bigint[], string[], string[]] & {
        metricTypes: bigint[];
        mins: bigint[];
        maxs: bigint[];
        units: string[];
        descriptions: string[];
      }
    ],
    "view"
  >;

  getHealthStatus: TypedContractMethod<
    [metric: BigNumberish],
    [string],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkBloodGlucose"
  ): TypedContractMethod<
    [bloodGlucose: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkBloodOxygen"
  ): TypedContractMethod<
    [bloodOxygen: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkBloodPressure"
  ): TypedContractMethod<
    [bloodPressure: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkBodyTemperature"
  ): TypedContractMethod<
    [bodyTemperature: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkHeartRate"
  ): TypedContractMethod<
    [heartRate: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBloodPressureRanges"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { min: bigint; max: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHealthMetricRanges"
  ): TypedContractMethod<
    [],
    [
      [bigint[], bigint[], bigint[], string[], string[]] & {
        metricTypes: bigint[];
        mins: bigint[];
        maxs: bigint[];
        units: string[];
        descriptions: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getHealthStatus"
  ): TypedContractMethod<[metric: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "HealthCheckRequested"
  ): TypedContractEvent<
    HealthCheckRequestedEvent.InputTuple,
    HealthCheckRequestedEvent.OutputTuple,
    HealthCheckRequestedEvent.OutputObject
  >;
  getEvent(
    key: "HealthCheckResult"
  ): TypedContractEvent<
    HealthCheckResultEvent.InputTuple,
    HealthCheckResultEvent.OutputTuple,
    HealthCheckResultEvent.OutputObject
  >;
  getEvent(
    key: "HealthStatusUpdated"
  ): TypedContractEvent<
    HealthStatusUpdatedEvent.InputTuple,
    HealthStatusUpdatedEvent.OutputTuple,
    HealthStatusUpdatedEvent.OutputObject
  >;

  filters: {
    "HealthCheckRequested(address,bytes32,uint8)": TypedContractEvent<
      HealthCheckRequestedEvent.InputTuple,
      HealthCheckRequestedEvent.OutputTuple,
      HealthCheckRequestedEvent.OutputObject
    >;
    HealthCheckRequested: TypedContractEvent<
      HealthCheckRequestedEvent.InputTuple,
      HealthCheckRequestedEvent.OutputTuple,
      HealthCheckRequestedEvent.OutputObject
    >;

    "HealthCheckResult(address,uint256,uint8,uint8)": TypedContractEvent<
      HealthCheckResultEvent.InputTuple,
      HealthCheckResultEvent.OutputTuple,
      HealthCheckResultEvent.OutputObject
    >;
    HealthCheckResult: TypedContractEvent<
      HealthCheckResultEvent.InputTuple,
      HealthCheckResultEvent.OutputTuple,
      HealthCheckResultEvent.OutputObject
    >;

    "HealthStatusUpdated(address,uint8)": TypedContractEvent<
      HealthStatusUpdatedEvent.InputTuple,
      HealthStatusUpdatedEvent.OutputTuple,
      HealthStatusUpdatedEvent.OutputObject
    >;
    HealthStatusUpdated: TypedContractEvent<
      HealthStatusUpdatedEvent.InputTuple,
      HealthStatusUpdatedEvent.OutputTuple,
      HealthStatusUpdatedEvent.OutputObject
    >;
  };
}
