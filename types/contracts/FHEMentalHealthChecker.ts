/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHEMentalHealthCheckerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowUserDecryption"
      | "assessmentCount"
      | "createProfile"
      | "getAnxietyLevel"
      | "getAssessmentCount"
      | "getDepressionScore"
      | "getFullProfile"
      | "getOverallStatus"
      | "getResilienceScore"
      | "getSleepQuality"
      | "getStressIndex"
      | "hasProfile"
      | "protocolId"
      | "updateMetric"
      | "updateProfile"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MetricUpdated"
      | "ProfileCreated"
      | "ProfileUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowUserDecryption",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assessmentCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnxietyLevel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssessmentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepressionScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFullProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOverallStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResilienceScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSleepQuality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStressIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetric",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "allowUserDecryption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assessmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAnxietyLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssessmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepressionScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOverallStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResilienceScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSleepQuality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStressIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasProfile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMetric",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;
}

export namespace MetricUpdatedEvent {
  export type InputTuple = [
    user: AddressLike,
    metric: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [user: string, metric: bigint, timestamp: bigint];
  export interface OutputObject {
    user: string;
    metric: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileCreatedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [user: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [user: string, timestamp: bigint];
  export interface OutputObject {
    user: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHEMentalHealthChecker extends BaseContract {
  connect(runner?: ContractRunner | null): FHEMentalHealthChecker;
  waitForDeployment(): Promise<this>;

  interface: FHEMentalHealthCheckerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowUserDecryption: TypedContractMethod<[], [void], "nonpayable">;

  assessmentCount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createProfile: TypedContractMethod<
    [
      _anxietyLevel: BytesLike,
      _anxietyProof: BytesLike,
      _depressionScore: BytesLike,
      _depressionProof: BytesLike,
      _stressIndex: BytesLike,
      _stressProof: BytesLike,
      _sleepQuality: BytesLike,
      _sleepProof: BytesLike,
      _resilienceScore: BytesLike,
      _resilienceProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getAnxietyLevel: TypedContractMethod<[], [string], "view">;

  getAssessmentCount: TypedContractMethod<[], [bigint], "view">;

  getDepressionScore: TypedContractMethod<[], [string], "view">;

  getFullProfile: TypedContractMethod<
    [],
    [[string, string, string, string, string]],
    "view"
  >;

  getOverallStatus: TypedContractMethod<[], [string], "nonpayable">;

  getResilienceScore: TypedContractMethod<[], [string], "view">;

  getSleepQuality: TypedContractMethod<[], [string], "view">;

  getStressIndex: TypedContractMethod<[], [string], "view">;

  hasProfile: TypedContractMethod<[], [boolean], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  updateMetric: TypedContractMethod<
    [metric: BigNumberish, value: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  updateProfile: TypedContractMethod<
    [
      _anxietyLevel: BytesLike,
      _anxietyProof: BytesLike,
      _depressionScore: BytesLike,
      _depressionProof: BytesLike,
      _stressIndex: BytesLike,
      _stressProof: BytesLike,
      _sleepQuality: BytesLike,
      _sleepProof: BytesLike,
      _resilienceScore: BytesLike,
      _resilienceProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowUserDecryption"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "assessmentCount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createProfile"
  ): TypedContractMethod<
    [
      _anxietyLevel: BytesLike,
      _anxietyProof: BytesLike,
      _depressionScore: BytesLike,
      _depressionProof: BytesLike,
      _stressIndex: BytesLike,
      _stressProof: BytesLike,
      _sleepQuality: BytesLike,
      _sleepProof: BytesLike,
      _resilienceScore: BytesLike,
      _resilienceProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAnxietyLevel"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAssessmentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepressionScore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFullProfile"
  ): TypedContractMethod<
    [],
    [[string, string, string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOverallStatus"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getResilienceScore"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getSleepQuality"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStressIndex"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasProfile"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateMetric"
  ): TypedContractMethod<
    [metric: BigNumberish, value: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProfile"
  ): TypedContractMethod<
    [
      _anxietyLevel: BytesLike,
      _anxietyProof: BytesLike,
      _depressionScore: BytesLike,
      _depressionProof: BytesLike,
      _stressIndex: BytesLike,
      _stressProof: BytesLike,
      _sleepQuality: BytesLike,
      _sleepProof: BytesLike,
      _resilienceScore: BytesLike,
      _resilienceProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MetricUpdated"
  ): TypedContractEvent<
    MetricUpdatedEvent.InputTuple,
    MetricUpdatedEvent.OutputTuple,
    MetricUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileCreated"
  ): TypedContractEvent<
    ProfileCreatedEvent.InputTuple,
    ProfileCreatedEvent.OutputTuple,
    ProfileCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;

  filters: {
    "MetricUpdated(address,uint8,uint256)": TypedContractEvent<
      MetricUpdatedEvent.InputTuple,
      MetricUpdatedEvent.OutputTuple,
      MetricUpdatedEvent.OutputObject
    >;
    MetricUpdated: TypedContractEvent<
      MetricUpdatedEvent.InputTuple,
      MetricUpdatedEvent.OutputTuple,
      MetricUpdatedEvent.OutputObject
    >;

    "ProfileCreated(address,uint256)": TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;
    ProfileCreated: TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;

    "ProfileUpdated(address,uint256)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
  };
}
